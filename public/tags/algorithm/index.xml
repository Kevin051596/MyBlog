<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>algorithm on MonsterYU Blog</title>
    <link>https://yukai.netlify.app/tags/algorithm/</link>
    <description>Recent content in algorithm on MonsterYU Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 04 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://yukai.netlify.app/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>5 C&#43;&#43; STL Containers</title>
      <link>https://yukai.netlify.app/post/2023-05-24/</link>
      <pubDate>Tue, 04 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yukai.netlify.app/post/2023-05-24/</guid>
      <description>以下為作者在練 C++ 時，較常使用到的容器以及其函數，整理成這份文章幫助作者我統整大腦中這部分的資料。 其他如 Deque, List, Array 等詳細使用，可至網路上搜尋或於 C++</description>
    </item>
    
    <item>
      <title>C&#43;&#43; String Operation</title>
      <link>https://yukai.netlify.app/post/2023-05-23/</link>
      <pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://yukai.netlify.app/post/2023-05-23/</guid>
      <description>String 刪除元素方式 erase() erase(iterator,刪除長度) erase(刪除起點,刪除終點)( 皆是 iterator ) #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; int main(){ vector&amp;lt;string&amp;gt; s1(2,&amp;#34;0123456789&amp;#34;); s1[0].erase(5); //012346789 s1[1].erase(5,3); //0123489 for(auto el:s1) cout&amp;lt;&amp;lt;el&amp;lt;&amp;lt;&amp;#34;\n&amp;#34;; vector&amp;lt;string&amp;gt; s2(2,&amp;#34;0123456789&amp;#34;); s2[0].erase(s[0].begin()+2); //013456789 s2[1].erase(s[1].begin()+2,s[1].end());</description>
    </item>
    
    <item>
      <title>複雜度 Complexity</title>
      <link>https://yukai.netlify.app/post/2023-05-22/</link>
      <pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://yukai.netlify.app/post/2023-05-22/</guid>
      <description>複雜度 主要用來分析一個演算法的計算能力與記憶體空間， 藉此用以評價該程式的能力，進而提升其計算能力。 時間複雜度與空間複雜度 Time / Space Complexity 主要分為兩個</description>
    </item>
    
  </channel>
</rss>
